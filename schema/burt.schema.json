{
    "$schema" : "https://json-schema.org/draft-07/schema",
    "$id" : "https://raw.githubusercontent.com/BURTools/burt/main/schema/burt.schema.json",
    "title" : "burt.json",
    "description" : "Schema for the main JSON file used by the Burt tools.",
    "type" : "object",
    "oneOf" : [
        { "$ref" : "#/$defs/module" },
        { "$ref" : "#/$defs/package" },
        { "$ref" : "#/$defs/project" }
    ],
    "$defs" : {
        "architectures" : {
            "type" : "string",
            "enum" : ["arm32", "arm64", "x86", "x86_64"]
        },
        "appStore" : {
            "type" : "string",
            "enum" : ["amazon", "google-play", "ios", "macos", "windows"]
        },
        "appStores" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/appStore" }
        },
        "branchName" : {
            "type" : "string",
            "minLength" : 1
        },
        "branchType" : {
            "type" : "string",
            "enum" : [ "dev", "feature", "internal", "release" ]
        },
        "command" : {
            "oneOf" : [
                { "$ref" : "#/$defs/commandAlias" },
                { "$ref" : "#/$defs/commandDef" }
            ]
        },
        "commands" : {
            "$comment" : "TODO: make sure the pattern is correct for command names",
            "type" : "object",
            "patternProperties" : {
                "[a-z0-9-_]+" : { "$ref" : "#/$defs/command" }
            },
            "additionalProperties" : false
        },
        "commandAlias" : {
            "type" : "string",
            "minLength" : 1
        },
        "commandArg" : {
            "oneOf" : [
                { "$ref" : "#/$defs/commandArgDef" },
                { "type" : "string", "minLength" : 1}
            ]
        },
        "commandArgDef" : {
            "type" : "object",
            "properties" : {
                "enumValues" : { "$ref" : "#/$defs/commandArgEnumValues" },
                "help" : { "$ref" : "#/$defs/help" },
                "multiple" : { "type" : "boolean" },
                "optional" : { "type" : "boolean" },
                "type" : { "$ref" : "#/$defs/commandArgType" }
            },
            "oneOf" : [
                {
                    "properties" : {
                        "type" : { 
                            "not" : { 
                                "enum" : ["enum"] 
                            }
                        }
                    },
                    "required" : [ "help" ]
                },
                {
                    "properties" : {
                        "type" : {
                            "enum" : [ "enum" ]
                        }
                    },
                    "required" : [ "enumValues", "help" ]
                }
            ],
            "additionalProperties" : false
        },
        "commandArgs" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/commandArg" }
        },
        "commandArgType" : {
            "type" : "string",
            "enum" : [ "enum", "integer", "number", "string" ]
        },
        "commandArgEnumValues" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/commandOptionEnumValue" },
            "minItems" : 1
        },
        "commandDef" : {
            "type" : "object",
            "properties" : {
                "args" : { "$ref" : "#/$defs/commandArgs" },
                "briefHelp" : { "type" : "string" },
                "examples" : { "$ref" : "#/$defs/commandExamples" },
                "longHelp" : { "$ref" : "#/$defs/help" },
                "options" : { "$ref" : "#/$defs/commandOptions" }
            },
            "required" : [ "briefHelp" ],
            "additionalProperties" : false
        },
        "commandExample" : {
            "type" : "object",
            "properties" : {
                "help" : { "$ref" : "#/$defs/help" },
                "multiArgCount" : { "type" : "integer" },
                "name" : { "type" : "string", "minLength" : 1 },
                "options" : {  "$ref" : "#/$defs/commandExampleOptions" }
            },
            "required" : [ "help", "name" ],
            "additionalProperties" : false
        },
        "commandExamples" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/commandExample" }
        },
        "commandExampleOption" : {
            "type" : "object",
            "properties" : {
                "defaultValue" : {},
                "quantity" : { "type" : "integer" }
            },
            "additionalProperties" : false
        },
        "commandExampleOptions" : {
            "$comment" : "TODO: make sure the pattern is correct for option names.",
            "type" : "object",
            "patternProperties" : { 
                "[a-z0-9-_]+" : { "$ref" : "#/$defs/commandExampleOption" }
            },
            "additionalProperties" : false
        },
        "commandOption" : {
            "type" : "object",
            "properties" : {
                "enumValues" : { "$ref" : "#/$defs/commandOptionEnumValues" },
                "help" : { "$ref" : "#/$defs/help" },
                "longSwitch" : { "type" : "string", "minLength" : 2 },
                "multiple" : { "type" : "boolean" },
                "required" : { "type" : "boolean" },
                "shortSwitch" : { "type" : "string", "minLength" : 1, "maxLength" : 1 },
                "type" : { "$ref" : "#/$defs/commandOptionType" }
            },
            "oneOf" : [
                {
                    "properties" : {
                        "type" : { 
                            "not" : { 
                                "enum" : ["enum"] 
                            }
                        }
                    },
                    "required" : [ "help" ]
                },
                {
                    "required" : [ "help", "enumValues" ]
                }
            ],
            "required" : [ "help" ],
            "additionalProperties" : false
        },
        "commandOptions" : {
            "$comment" : "TODO: need to ensure the correct pattern here",
            "type" : "object",
            "patternProperties" : {
                "[a-z0-9-_]" : { "$ref" : "#/$defs/commandOption" }
            },
            "additionalProperties" : false
        },
        "commandOptionEnumValue" : {
            "type" : "object",
            "properties" : {
                "help" : { "$ref" : "#/$defs/help" },
                "value" : { "type" : "string", "minLength" : 1 }
            },
            "required" : ["help", "value"],
            "additionalProperties" : false
        },
        "commandOptionEnumValues" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/commandOptionEnumValue" }
        },
        "commandOptionType" : {
            "type" : "string",
            "enum" : [ "boolean", "enum", "integer", "number", "string" ]
        },
        "condition" : {
            "type" : "object",
            "properties" : {
                "allOf" : { "$ref" : "#/$defs/conditions" },
                "anyOf" : { "$ref" : "#/$defs/conditions" },
                "hostProfile" : { "$ref" : "#/$defs/profileCondition" },
                "not" : { "$ref" : "#/$defs/condition" },
                "oneOf" : { "$ref" : "#/$defs/conditions" },
                "targetProfile" : { "$ref" : "#/$defs/profileCondition" }
            },
            "additionalProperties" : false
        },
        "conditions" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/condition" }
        },
        "configOption" : {
            "$comment" : "TODO: ensure logic on requirements is handled properly here",
            "type" : "object",
            "properties" : {
                "briefHelp" : { "type" : "string", "minLength" : 1 },
                "context" : { "$ref" : "#/$defs/configOptionContext"},
                "itemOption" : { "$ref" : "#/$defs/configOption" },
                "longHelp" : { "$ref" : "#/$defs/help" },
                "options" : { "$ref" : "#/$defs/configOptions" },
                "type" : { "$ref" : "#/$defs/configOptionType" }
            },
            "oneOf" : [
                {
                    "properties" : {
                        "type" : { 
                            "not" : { 
                                "enum" : [ "array", "object" ] 
                            }
                        }
                    },
                    "required" : [ "briefHelp" ]
                },
                {
                    "required" : [ "briefHelp", "itemOption" ]
                }
            ],
            "additionalProperties" : false
        },
        "configOptions" : {
            "$comment" : "TODO: make sure this is a valid regex for options",
            "type" : "object",
            "patternProperties" : {
                "[a-z0-9-_]+" : { "$ref" : "#/$defs/configOption" }
            },
            "additionalProperties" : false
        },
        "configOptionContext" : {
            "type" : "string",
            "enum" : [ "both", "global", "local" ]
        },
        "configOptionType" : {
            "type" : "string",
            "enum" : [ "array", "boolean", "group", "integer", "object", "string" ]
        },
        "contact" : {
            "oneOf" : [
                { "$ref" : "#/$defs/contactObj"},
                { "type" : "string"}
            ]
        },
        "contacts" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/contact" }
        },
        "contactObj" : {
            "type" : "object",
            "properties" : {
                "email" : { "format" : "email" },
                "name" : { "$ref" : "#/$defs/contactName" },
                "url" : { "format" : "uri" }
            },
            "required" : [ "name" ],
            "additionalProperties" : false
        },
        "contactName" : {
            "type" : "string",
            "minLength" : 1
        },
        "cmakeModuleExtension" : {
            "type" : "object",
            "properties" : {
                "directoryProperties" : { "$ref" : "#/$defs/cmakeProperties" },
                "directoryPropertyChanges" : { "$ref" : "#/$defs/cmakePropertyChanges" },
                "sourceRules" : { "$ref" : "#/$defs/cmakeSourceRules" },
                "targetProperties" : { "$ref" : "#/$defs/cmakeProperties" },
                "targetPropertyChanges" : { "$ref" : "#/$defs/cmakePropertyChanges" },
                "variables" : { "$ref" : "#/$defs/cmakeVariables" },
                "variableChanges" : { "$ref"  : "#/$defs/cmakeVariableChanges" }
            },
            "additionalProperties" : false
        },
        "cmakeModuleRuleExtension" : {
            "$comment" : "this is currently the same as the module extension",
            "$ref" : "#/$defs/cmakeModuleExtension"
        },
        "cmakePackageExtension" : {
            "$comment" : "TODO: add proper checking of testResourceData vs testResourceMethod",
            "type" : "object",
            "properties" : {
                "directoryProperties" : { "$ref" : "#/$defs/cmakeProperties" },
                "directoryPropertyChanges" : { "$ref" : "#/$defs/cmakePropertyChanges" },
                "tests" : { "$ref" : "#/$defs/cmakeTests" },
                "testResourceData" : {},
                "testResourceMethod" : { "$ref" : "#/$defs/cmakeTestResourceMethod" },
                "variables" : { "$ref" : "#/$defs/cmakeVariables" },
                "variableChanges" : { "$ref" : "#/$defs/cmakeVariableChanges" }
            },
            "additionalProperties" : false
        },
        "cmakePackageRuleExtension" : {
            "$comment" : "this is currently the same as the package extension",
            "$ref" : "#/$defs/cmakePackageExtension"
        },
        "cmakeProjectExtension" : {
            "type" : "object",
            "properties" : {
                "directoryProperties" : { "$ref" : "#/$defs/cmakeProperties" },
                "directoryPropertyChanges" : { "$ref" : "#/$defs/cmakePropertyChanges" },
                "globalProperties" : { "$ref" : "#/$defs/cmakeProperties" },
                "testResourceSpecification" : { "$ref" : "#/$defs/cmakeTestResourceSpecification" },
                "variables" : { "$ref" : "#/$defs/cmakeVariables" },
                "variableChanges" : { "$ref" : "#/$defs/cmakeVariableChanges" }
            },
            "additionalProperties" : false
        },
        "cmakeProjectRuleExtension" : {
            "$comment" : "this is currently the same as the project extension",
            "$ref" : "#/$defs/cmakeProjectExtension"
        },
        "cmakeProperties" : {
            "type" : "object",
            "patternProperties" : {
                "^[A-Z0-9_-]+$" : { "$ref" : "#/$defs/cmakePropertyValue" }
            },
            "additionalProperties" : false
        },
        "cmakePropertyChange" : {
            "$comment" : "TOOD: add validation for the value and match based on the oper",
            "type" : "object",
            "properties" : {
                "match" : { "format" : "regex" },
                "name" : { "$ref" : "#/$defs/cmakePropertyName" },
                "oper" : { "$ref" : "#/$defs/cmakePropertyChangeOperation" },
                "value" : { "$ref" : "#/$defs/cmakePropertyValue" }
            },
            "required" : [ "name", "oper" ],
            "additionalProperties" : "false"
        },
        "cmakePropertyChanges" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/cmakePropertyChange" }
        },
        "cmakePropertyChangeOperation" : {
            "type" : "string",
            "enum" : [
                "cmake_list_append", 
                "cmake_list_prepend",
                "path_list_append",
                "path_list_prepend",
                "regex",
                "reset",
                "string_append",
                "string_prepend",
                "unset"
            ]
        },
        "cmakePropertyName" : {
            "type" : "string",
            "minLength" : 1
        },
        "cmakePropertyValue" : {
            "anyOf" : [
                { "type" : "string" },
                { "type" : "boolean" },
                { "type" : "number" }
            ]
        },
        "cmakeSourceRule" : {
            "type" : "string",
            "properties" : {
                "excludeRegex" : { "$ref" : "#/$defs/cmakeSourceRuleFilter" },
                "includePattern" : { "$ref" : "#/$defs/cmakeSourceRuleGlob" },
                "includeRegex" : { "$ref" : "#/$defs/cmakeSourceRuleFilter" }
            },
            "additionalProperties" : false
        },
        "cmakeSourceRules" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/cmakeSourceRule" }
        },
        "cmakeSourceRuleFilter" : {
            "oneOf" : [
                { "format" : "regex" },
                { "$ref" : "#/$defs/regularExpressionList" }
            ]
        },
        "cmakeSourceRuleGlob" : {
            "oneOf" : [
                { "$ref" : "#/$defs/globExpression" },
                { "$ref" : "#/$defs/globExpressionList" }
            ]
        },
        "cmakeTest" : {
            "type" : "object",
            "properties" : {
                "command" : { "$ref" : "#/$defs/cmakeTestCommand" },
                "configurations" : { "$ref" : "#/$defs/cmakeTestConfigurations" },
                "name" : { "$ref" : "#/$defs/cmakeTestName" },
                "properties" : { "$ref" : "#/$defs/cmakeProperties" },
                "propertyChanges" : { "$ref" : "#/$defs/cmakePropertyChanges" },
                "rules" : { "$ref" : "#/$defs/cmakeTestRules" }
            },
            "required" : [ "command", "name" ],
            "additionalProperties" : false
        },
        "cmakeTests" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/cmakeTest" }
        },
        "cmakeTestCommand" : {
            "type" : "array",
            "items" : { 
                "type" : "string", 
                "minLength" : 1
            },
            "minItems" : 1
        },
        "cmakeTestConfigurations" : {
            "type" : "array",
            "items" : {
                "type" : "string",
                "minLength" : 1
            },
            "minItems" : 1
        },
        "cmakeTestName" : {
            "type" : "string",
            "minLength" : 1
        },
        "cmakeTestResourceMethod" : {
            "type" : "string",
            "enum" : [ "json", "test" ]
        },
        "cmakeTestResourceSpecification" : {
            "type" : "object",
            "properties" : {
                "local" : { "$ref" : "#/$defs/cmakeTestResourceSpecLocal" },
                "version" : { "$ref" : "#/$defs/cmakeTestResourceSpecVersion" }
            },
            "required" : [ "local", "version" ],
            "additionalProperties" : false
        },
        "cmakeTestResourceSpecGroup" : {
            "type" : "object",
            "properties" : {
                "id" : { "$ref" : "#/$defs/cmakeTestResourceSpecGroupId" },
                "slots" : { "type" : "integer" }
            },
            "required" : [ "id" ],
            "additionalProperties" : false
        },
        "cmakeTestResourceSpecGroupId" : {
            "type" : "string",
            "pattern" : "^[a-z0-9_]+$"
        },
        "cmakeTestResourceSpecLocal" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/cmakeTestResourceSpecLocalItem" }
        },
        "cmakeTestResourceSpecLocalItem" : {
            "type" : "object",
            "patternProperties" : {
                "^[a-z_][a-z0-9_]*$" : { "$ref" : "#/$defs/cmakeTestResourceSpecGroup" }
            },
            "additionalProperties" : false
        },
        "cmakeTestResourceSpecVersion" : {
            "type" : "object",
            "properties" : {
                "major" : { "type" : "integer" },
                "minor" : { "type" : "integer" }
            },
            "required" : [ "major", "minor" ],
            "additionalProperties" : false
        },
        "cmakeTestRule" : {
            "type" : "object",
            "properties" : {
                "additionalArguments" : { "$ref" : "#/$defs/cmakeTestCommand" },
                "command" : { "$ref" : "#/$defs/cmakeTestCommand" },
                "condition" : { "$ref" : "#/$defs/condition" },
                "configurations" : { "$ref" : "#/$defs/cmakeTestConfigurations" },
                "continue" : { "type" : "boolean" },
                "properties" : { "$ref" : "#/$defs/cmakeProperties" },
                "propertyChanges" : { "$ref" : "#/$defs/cmakePropertyChanges" }
            },
            "additionalProperties" : false
        },
        "cmakeTestRules" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/cmakeTestRule" }
        },
        "cmakeVariables" : {
            "type" : "object",
            "patternProperties" : {
                "^[A-Z0-9_-]+$" : { "$ref" : "#/$defs/cmakePropertyValue" }
            },
            "additionalProperties" : false
        },
        "cmakeVariableChange" : {
            "$comment" : "TOOD: add validation for the value and match based on the oper",
            "type" : "object",
            "properties" : {
                "match" : { "format" : "regex" },
                "name" : { "$ref" : "#/$defs/cmakeVariableName" },
                "oper" : { "$ref" : "#/$defs/cmakePropertyChangeOperation" },
                "value" : { "$ref" : "#/$defs/cmakePropertyValue" }
            },
            "required" : [ "name", "oper" ],
            "additionalProperties" : "false"
        },
        "cmakeVariableChanges" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/cmakeVariableChange" }
        },
        "cmakeVariableName" : {
            "$comment" : "TODO: regex to filter valid CMake variable names",
            "type" : "string",
            "minLength" : 1
        },
        "cpuArchitecture" : {
            "type" : "string",
            "enum" : ["arm32", "arm64", "x86", "x86_64" ]
        },
        "cpuArchitectures" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/cpuArchitecture" }
        },
        "extension" : {
            "type" : "object",
            "properties" : {
                "commands" : { "$ref" : "#/$defs/commands" },
                "functions" : { "$ref" : "#/$defs/functions" },
                "hooks" : { "$ref" : "#/$defs/hooks" },
                "options" : { "$ref" : "#/$defs/configOptions"},
                "schemas" : { "$ref" : "#/$defs/extensionSchemas" }
            },
            "additionalProperties" : false
        },
        "extensionSchemas" : {
            "type" : "object",
            "properties" : {
                "module" : { "$ref" : "#/$defs/jsonSchema" },
                "package" : { "$ref" : "#/$defs/jsonSchema" },
                "project" : { "$ref" : "#/$defs/jsonSchema" }
            },
            "additionalProperties" : false
        },
        "function" : {
            "type" : "object",
            "properties" : {
                "args" : { "$ref" : "#/$defs/functionArgs"},
                "help" : { "$ref" : "#/$defs/help" },
                "pipe" : { "type" : "boolean" },
                "return" : { "$ref" : "#/$defs/functionParameter" }
            },
            "required" : [ "help" ],
            "additionalProperties" : false
        },
        "functions" : {
            "type" : "object",
            "patternProperties" : {
                "[a-z0-9-_]+" : { "$ref" : "#/$defs/command" }
            },
            "additionalProperties" : false
        },
        "functionArgs" : { 
            "type" : "array",
            "items" : { "$ref" : "#/$defs/functionParameter"}
        },
        "functionName" : {
            "$comment" : "A valid string for a function name. TODO: use a better pattern here",
            "type" : "string",
            "minLength" : 1
        },
        "functionParameter" : {
            "type" : "object",
            "properties" : {
                "help" : { "$ref" : "#/$defs/help" },
                "schema" : { "$ref" : "#/$defs/schema" }
            },
            "required" : [ "help" ],
            "additionalProperties" : false
        },
        "globExpression" : {
            "$comment" : "TODO: need a real regex to test this",
            "type" : "string",
            "minLength" : 1
        },
        "globExpressionList" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/globExpression" }
        },
        "help" : {
            "oneOf" : [
                { "type" : "string", "minLength" : 1 },
                { "$ref" : "#/$defs/helpSections" }
            ]
        },
        "helpSection" : {
            "oneOf" : [
                { "type" : "string", "minLength" : 1 },
                { "$ref" : "#/$defs/helpSectionDef"}
            ]
        },
        "helpSections" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/helpSection" }
        },
        "helpSectionDef" : {
            "type" : "object",
            "properties" : {
                "help" : { "$ref" : "#/$defs/help" },
                "indent" : { "type" : "boolean" },
                "title" : { "type" : "string", "minLength" : 1 }
            },
            "required" : [ "help" ],
            "additionalProperties" : false
        },
        "hook" : {
            "type" : "object",
            "properties" : {
                "after" : { "$ref" : "#/$defs/pluginNames" },
                "before" : { "$ref" : "#/$defs/pluginNames" },
                "callback" : { "$ref" : "#/$defs/functionName" },
                "extension" : { "$ref" : "#/$defs/packageName" },
                "function" : { "$ref" : "#/$defs/functionName" },
                "type" : { "$ref" : "#/$defs/hookType" }
            },
            "required" : [ "callback", "extension", "function", "type" ],
            "additionalProperties" : false
        },
        "hooks" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/hook" }
        },
        "hookType" : {
            "type" : "string",
            "enum" : [ "pipe", "post", "pre" ]
        },
        "homepage" : {
            "type" : "string", 
            "format" : "uri" 
        },
        "jsonSchema" : {
            "$comment" : "TODO: reference actual JSON schema schema to validate that this is correct",
            "type" : "object"
        },
        "keywords" : {
            "type" : "array",
            "items" : { "type" : "string", "minLength" : 1 }
        },
        "libraryFilePath" : {
            "$comment" : "TODO: be a bit more descriptive about the type of file allowed here.",
            "$ref" : "#/$defs/path"
        },
        "libraryType" : {
            "type" : "string",
            "enum" : ["combined", "dynamic", "header", "shared", "static"]
        },
        "license" : {
            "$comment" : "This should be SPDX license expressions.",
            "type" : "string",
            "minLength" : 1
        },
        "majorMinorVer" : {
            "$comment" : "Allows just the MAJOR and MINOR of the semver. The patch and suffix will be computed automatically",
            "type" : "string",
            "pattern" : "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)$"
        },
        "module" : {
            "type" : "object",
            "properties" : {
                "buildCondition" : { "$ref" : "#/$defs/condition" },
                "bundle" : { "type" : "boolean" },
                "dependencies" : { "$ref" : "#/$defs/moduleDependencies" },
                "deploy" : { "type" : "boolean" },
                "export" : { "type" : "boolean" },
                "extended" : { "$ref" : "#/$defs/moduleExtended" },
                "libraryType" : { "$ref" : "#/$defs/libraryType" },
                "name" : { "$ref" : "#/$defs/moduleName" },
                "privateHeaderDirs" : { "$ref" : "#/$defs/relativePathList" },
                "publicHeaderDirs" : { "$ref" : "#/$defs/relativePathList" },
                "publicHeaderExcludes" : { "$ref" : "#/$defs/regularExpressionList" },
                "publicHeaderGlobs" : { "$ref" : "#/$defs/globExpressionList" },
                "rules" : { "$ref" : "#/$defs/moduleRules" },
                "sources" : { "$ref" : "#/$defs/relativePathList" },
                "sourceDirs" : { "$ref" : "#/$defs/relativePathList" },
                "sourceExcludes" : { "$ref" : "#/$defs/regularExpressionList" },
                "sourceGlobs" : { "$ref" : "#/$defs/globExpressionList" },
                "stores" : { "$ref" : "#/$defs/appStores" },
                "type" : { "$ref" : "#/$defs/moduleType" }
            },
            "required" : [ "type" ],
            "additionalProperties" : false
        },
        "modules" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/module" }
        },
        "moduleDependency" : {
            "oneOf" : [
                { "$ref" : "#/$defs/moduleDependencyDef" },
                { "$ref" : "#/$defs/moduleDependencyString" }
            ]
        },
        "moduleDependencyDef" : {
            "type" : "object",
            "properties" : {
                "deploy" : { "type" : "boolean" },
                "link" : { "type" : "boolean" },
                "name" : { "$ref" : "#/$defs/moduleDependencyString" },
                "package" : { "$ref" : "#/$defs/packageName" },
                "transitive" : { "type" : "boolean" }
            },
            "required" : [ "name" ],
            "additionalProperties" : false
        },
        "moduleDependencyString" : {
            "oneOf" : [
                { "$ref" : "#/$defs/moduleName" },
                { "$ref" : "#/$defs/libraryFilePath" },
                { "$ref" : "#/$defs/qualifiedModuleName" }
            ]
        },
        "moduleDependencies" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/moduleDependency" }
        },
        "moduleExtended" : {
            "type" : "object",
            "properties" : {
                "cmake" : { "$ref" : "#/$defs/cmakeModuleExtension" }
            },
            "additionalProperties" : false
        },
        "moduleName" : {
            "$comment" : "TODO: need a sensible regex here for the valid module names.",
            "type" : "string",
            "minLength" : 1
        },
        "moduleRule" : {
            "type" : "object",
            "properties" : {
                "bundle" : { "type" : "boolean" },
                "condition" : { "$ref" : "#/$defs/condition" },
                "continue" : { "type" : "boolean" },
                "dependencies" : { "$ref" : "#/$defs/moduleDependencies" },
                "deploy" : { "type" : "boolean" },
                "export" : { "type" : "boolean" },
                "extended" : { "$ref" : "#/$defs/moduleRuleExtended" },
                "libraryType" : { "$ref" : "#/$defs/libraryType" },
                "privateHeaderDirs" : { "$ref" : "#/$defs/relativePathList" },
                "publicHeaderDirs" : { "$ref" : "#/$defs/relativePathList" },
                "publicHeaderExcludes" : { "$ref" : "#/$defs/regularExpressionList" },
                "publicHeaderGlobs" : { "$ref" : "#/$defs/globExpressionList" },
                "sources" : { "$ref" : "#/$defs/relativePathList" },
                "sourceDirs" : { "$ref" : "#/$defs/relativePathList" },
                "sourceExcludes" : { "$ref" : "#/$defs/regularExpressionList" },
                "sourceGlobs" : { "$ref" : "#/$defs/globExpressionList" },
                "stores" : { "$ref" : "#/$defs/appStores" },
                "type" : { "$ref" : "#/$defs/moduleType" }
            },
            "additionalProperties" : false
        },
        "moduleRules" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/moduleRule"}
        },
        "moduleRuleExtended" : {
            "type" : "object",
            "properties" : {
                "cmake" : { "$ref" : "#/$defs/cmakeModuleRuleExtension" }
            },
            "additionalProperties" : false
        },
        "moduleType" : {
            "type" : "string",
            "enum" : ["executable", "library"]
        },
        "operatingSystem" : {
            "type" : "string",
            "enum" : ["linux", "macos", "windows"]
        },
        "operatingSystems" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/operatingSystem" }
        },
        "package" : {
            "type" : "object",
            "properties" : {
                "author" : { "$ref" : "#/$defs/contact" },
                "buildCondition" : { "$ref" : "#/$defs/condition" },
                "contributors" : { "$ref" : "#/$defs/contacts" },
                "dependencies" : { "$ref" : "#/$defs/packageDependencies" },
                "devDependencies" : { "$ref" : "#/$defs/packageDependencies" },
                "description" : { "type" : "string" },
                "extended" : { "$ref" : "#/$defs/packageExtended" },
                "extension" : { "$ref" : "#/$defs/extension" },
                "homepage" : { "$ref" : "#/$defs/homepage" },
                "imported" : { "type" : "boolean" },
                "keywords" : { "$ref" : "#/$defs/keywords" },
                "license" : { "$ref" : "#/$defs/license" },
                "modules" : { "$ref" : "#/$defs/modules" },
                "name" : { "$ref" : "#/$defs/packageName" },
                "path" : { "$ref" : "#/$defs/path" },
                "rules" : { "$ref" : "#/$defs/packageRules" },
                "toolDependencies" : { "$ref" : "#/$defs/packageDependencies" },
                "version" : { "$ref" : "#/$defs/packageVersion" }
            },
            "required" : [ "name", "version" ],
            "additionalProperties" : false
        },
        "packages" : {
            "type" : "array",
            "items" : { 
                "oneOf" : [
                    { "$ref" : "#/$defs/package" },
                    { "$ref" : "#/$defs/path" }
                ]
            }
        },
        "packageDependency" : {
            "oneOf" : [
                { "$ref" : "#/$defs/versionRange" },
                { "$ref" : "#/$defs/packageDependencyDef" }
            ]
        },
        "packageDependencies" : {
            "$comment" : "TODO: make sure this is a correct regex for package names here",
            "type" : "object",
            "patternProperties" : {
                "[a-z0-9-_]" : { "$ref" : "#/$defs/packageDependency" }
            }
        },
        "packageDependencyDef" : {
            "type" : "object",
            "properties" : {
                "branch" : { "$ref" : "#/$defs/branchName" },
                "branchType" : { "$ref" : "#/$defs/branchType" },
                "optional" : { "type" : "boolean" },
                "path" : { "$ref" : "#/$defs/path" },
                "version" : { "$ref" : "#/$defs/versionRange" }
            },
            "allOf" : [
                {
                    "oneOf" : [
                        {
                            "properties" : {
                                "branchType" : { 
                                    "not" : { 
                                        "enum" : [ "feature", "internal" ] 
                                    }
                                }
                            }
                        },
                        {
                            "required" : [ "branch" ]
                        }
                    ]
                },
                {
                    "oneOf" : [
                        {
                            "required" : [ "path" ]
                        },
                        {
                            "required" : [ "version" ]
                        }
                    ]
                }
            ],
            "additionalProperties" : false
        },
        "packageExtended" : {
            "type" : "object",
            "properties" : {
                "cmake" : { "$ref" : "#/$defs/cmakePackageExtension" }
            },
            "additionalProperties" : false
        },
        "packageName" : {
            "type" : "string",
            "minLength" : 2,
            "maxLength" : 50,
            "pattern" : "^[a-zA-Z0-9_][a-zA-Z0-9_\\+\\.-]{1,49}$"
        },
        "packageRule" : {
            "type" : "object",
            "properties" : {
                "condition" : { "$ref" : "#/$defs/condition" },
                "continue" : { "type" : "boolean" },
                "dependencies" : { "$ref" : "#/$defs/packageDependencies" },
                "devDependencies" : { "$ref" : "#/$defs/packageDependencies" },
                "extended" : { "$ref" : "#/$defs/packageRuleExtended" },
                "imported" : { "type" : "boolean" },
                "license" : { "$ref" : "#/$defs/license" },
                "toolDependencies" : { "$ref" : "#/$defs/packageDependencies" }
            },
            "additionalProperties" : false
        },
        "packageRules" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/packageRule" }
        },
        "packageRuleExtended" : {
            "type" : "object",
            "properties" : {
                "cmake" : { "$ref" : "#/$defs/cmakePackageRuleExtension" }
            },
            "additionalProperties" : false
        },
        "packageVersion" : {
            "oneOf" : [
                { "$ref" : "#/$defs/semver" },
                { "$ref" : "#/$defs/majorMinorVer" }
            ]
        },
        "path" : {
            "$comment" : "This will get validated at runtime to see if it matches an valid path.",
            "type" : "string",
            "minLength" : 1
        },
        "pluginNames" : {
            "$comment" : "List of strings of valid plugin names",
            "type" : "array",
            "items" : { "$ref" : "#/$defs/packageName" }
        },
        "profileCondition" : {
            "type" : "object",
            "properties" : {
                "architectures" : { "$ref" : "#/$defs/architectures" },
                "operatingSystems" : { "$ref" : "#/$defs/operatingSystems" }
            },
            "additionalProperties" : false
        },
        "project" : {
            "type" : "object",
            "properties": {
                "author" : { "$ref" : "#/$defs/contact"},
                "contributors" : { "$ref" : "#/$defs/contacts" },
                "extended" : { "$ref" : "#/$defs/projectExtended" },
                "homepage" : { "$ref" : "#/$defs/homepage" },
                "license" : { "$ref" : "#/$defs/license" },
                "packages" : { "$ref" : "#/$defs/packages" },
                "repository" : { "$ref" : "#/$defs/repository" },
                "rules" : { "$ref" : "#/$defs/projectRules" },
                "subProjects" : { "$ref" : "#/$defs/subProjects" },
                "toolDependencies" : { "$ref" : "#/$defs/packageDependencies"}
            },
            "required" : [ "packages", "repository", "toolDependencies" ],
            "additionalProperties" : false
        },
        "projectExtended" : {
            "type" : "object",
            "properties" : {
                "cmake" : { "$ref" : "#/$defs/cmakeProjectExtension" }
            },
            "additionalProperties" : false
        },
        "projectRule" : {
            "type" : "object",
            "properties" : {
                "condition" : { "$ref" : "#/$defs/condition" },
                "continue" : { "type" : "boolean" },
                "extended" : { "$ref" : "#/$defs/projectRuleExtended" },
                "license" : { "$ref" : "#/$defs/license" },
                "packages" : { "$ref" : "#/$defs/packages" },
                "subProjects" : { "$ref" : "#/$defs/subProjects" },
                "toolDependencies" : { "$ref" : "#/$defs/packageDependencies"}
            },
            "additionalProperties" : false
        },
        "projectRules" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/projectRule" }
        },
        "projectRuleExtended" : {
            "type" : "object",
            "properties" : {
                "cmake" : { "$ref" : "#/$defs/cmakeProjectRuleExtension"}
            },
            "additionalProperties" : false
        },
        "qualifiedModuleName" : {
            "$comment" : "A module name with the package name that goes with it. TODO: need regex",
            "type" : "string",
            "minLength" : 1
        },
        "regularExpressionList" : {
            "type" : "array",
            "items" : { "format" : "regex" }
        },
        "repository" : {
            "oneOf" : [
                { "type" : "string", "format" : "uri" },
                { "$ref" : "#/$defs/repositoryDef" }
            ]
        },
        "repositoryDef" : {
            "type" : "object",
            "properties" : {
                "mainBranch" : { "type" : "string" },
                "featureBranchPattern" : { "format" : "regex" },
                "releaseBranchPattern" : { "format" : "regex" },
                "type" : { "$ref" : "#/$defs/repositoryType" },
                "url" : { "format" : "uri" }
            },
            "required" : [ "url" ],
            "additionalProperties" : false
        },
        "relativePath" : {
            "$comment" : "This will get validated as a correct path at runtime, so no need for a pattern.",
            "type" : "string",
            "minLength" : 1
        },
        "relativePathList" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/relativePath" }
        },
        "repositoryType" : {
            "$comment" : "The actual types supported will be determined at runtime, but it needs to be non-empty.",
            "type" : "string",
            "minLength" : 1
        },
        "schema" : {
            "$comment" : "Akin to JSON schema, same format, could be file or string, TODO: need regex for it",
            "type" : "string",
            "minLength" : 1
        },
        "semver" : {
            "$comment" : "Conforms to the semver specification at https://semver.org",
            "type" : "string",
            "pattern" : "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
        },
        "subProjects" : {
            "type" : "array",
            "items" : { "$ref" : "#/$defs/path" }
        },
        "versionRange" : {
            "$comment" : "Conforms to the supported version range on https://github.com/npm/node-semver. TODO: implement actual regex for this.",
            "type" : "string",
            "minLength" : 1
        }
    }
}

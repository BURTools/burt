include_guard(GLOBAL)

function(burt_json_query out_var json)
    set(_options)
    set(_single_args)
    set(_operations GET TYPE MEMBER LENGTH REMOVE SET EQUAL)
    set(_multi_args ${_operations} ERROR_MESSAGE)
    cmake_parse_arguments(_arg "${_options}" "${_single_args}" "${_multi_args}" ${ARGN})

    # make sure there's a unique operand and get the query from it.
    set(_oper "")
    set(_query "")
    foreach(_this_oper ${_operations})
        if(NOT "${_arg_${_this_oper}}" STREQUAL "")
            if(NOT _oper STREQUAL "")
                message(FATAL_ERROR "burt_json_query cannot be called with more than one operand")
            endif()
            set(_oper ${_this_oper})
            set(_query ${_arg_${_this_oper}})
        endif()
    endforeach()
    message(TRACE "Doing JSON query operation '${_oper}' with query '${_query}'")
    if(NOT _oper)
        message(DEBUG "Invalid query given: ${ARGN}")
        message(FATAL_ERROR "Invalid query operation given")
    endif()
    if(NOT _query)
        message(FATAL_ERROR "Query operation '${_oper}' given invalid query '${_query}'")
    endif()

    # Execute the JSON query and pass back the result or throw an error if there is one.
    string(JSON _temp ERROR_VARIABLE _err ${_oper} ${json} ${_query})
    if(NOT _err STREQUAL "NOTFOUND")
        set(_temp "NOTFOUND")
        message(DEBUG "JSON query failed: " ${_err})
        if(_arg_ERROR_MESSAGE)
            message(FATAL_ERROR ${_arg_ERROR_MESSAGE})
        endif()
    endif()
    set(${out_var} ${_temp} PARENT_SCOPE)
endfunction()

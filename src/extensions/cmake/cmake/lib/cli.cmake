
function(burt_cli_execute)
    # There is the special case of when building Burt itself that we need to disable execution. It should
    # never need this in any of the code paths it executes, so this will avoid the chicken and egg problem.
    if(_BURT_BUILDING_SELF)
        message(FATAL_ERROR "Cannot execute Burt when building itself")
    endif()
    if(NOT EXISTS ${BURT_EXE})
        message(FATAL_ERROR "Invalid location given for Burt executable: ${BURT_EXE}")
    endif()

    # Determine what debug level to pass on to Burt.
    cmake_language(GET_MESSAGE_LOG_LEVEL _log_level)
    if(_log_level STREQUAL "ERROR" OR _log_level STREQUAL "WARNING")
        set(_level 0)
    elseif(_log_level STREQUAL "NOTICE")
        set(_level 1)
    elseif(_log_level STREQUAL "STATUS")
        set(_level 2)
    elseif(_log_level STREQUAL "VERBOSE" OR _log_level STREQUAL "DEBUG")
        set(_level 3)
    elseif(_log_level STREQUAL "TRACE")
        set(_level 4)
    else()
        message(FATAL_ERROR "Unknown log level: ${_log_level}")
    endif()

    # Fix up the arguments so we can guarantee everything executes properly.
    set(_skip_next OFF)
    math(EXPR _last_arg "${ARGC}-1")
    set(_variables RESULT_VARIABLE RESULTS_VARIABLE OUTPUT_VARIABLE ERROR_VARIABLE)
    foreach(_arg_idx RANGE ${_last_arg})
        list(GET ARGV ${_arg_idx} _arg)
        if(NOT _skip_next)
            list(APPEND _args ${_arg})
        else()
            set(_skip_next OFF)
        endif()
        if(_arg STREQUAL COMMAND)
            list(APPEND _args ${BURT_EXE} --log-level ${_log_level})
        elseif(_arg STREQUAL WORKING_DIRECTORY)
            list(APPEND _args "${CMAKE_SOURCE_DIR}")
            set(_skip_next ON)
        elseif(_arg IN_LIST _variables)
            list(APPEND _args __var_${_arg})
            math(EXPR _next_idx "${_arg_idx}+1")
            list(GET ARGV ${_next_idx} __orig_var_${_arg})
            set(_skip_next ON)
        endif()
    endforeach()
    message(TRACE "burt_execute_command calling execute_process: ${_args}")
    execute_process(${_args})

    # Map back all of the out variables.
    foreach(_var ${_variables})
        if(DEFINED __var_${_var})
            set(__orig_var_${_var} ${__var_${_var}} PARENT_SCOPE)
        endif()
    endforeach()
endfunction()
